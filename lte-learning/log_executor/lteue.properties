type = lteue
hostname = 127.0.0.1

#ue_controller_ip_address = 127.0.0.1
ue_controller_ip_address = 10.0.0.166


#ue_controller_ip_address = 192.168.0.105
enodeb_controller_ip_address = 127.0.0.1
mme_controller_ip_address = 127.0.0.1
mme_port = 60000
ue_port = 61000
enodeb_port = 60001
#alphabet = DELAY ASSOC(RSNE=tc) ASSOC(RSNE=tt) ASSOC(RSNE=ct) ASSOC(RSNE=cc) E2(|KD=WPA2|RSNE=cc|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|) E4 DATA E2 ENC_DATA E2(|KD=WPA1|RSNE=tt|CS=MD5|) E2(|KD=WPA2|RSNE=tt|CS=MD5|) E2(|MIC=F|) E2(|RC=>|) E4(|MIC=F|) E4(|KD=WPA1|RSNE=tt|CS=MD5|)
#E2(|KD=WPA1|RSNE=cc|CS=SHA1|) E2(|KD=RAND|RSNE=cc|CS=SHA1|) E2(|KD=WPA2|RSNE=tc|CS=SHA1|) E2(|KD=WPA2|RSNE=ct|CS=MD5|) E2(|KD=WPA1|RSNE=tt|CS=MD5|) E2(|KD=WPA2|RSNE=tt|CS=MD5|) E2(|MIC=F|) E2(|RC=>|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=PMSx|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=PMSE|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=Pxxx|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=xxxx|) E2(|KD=WPA2|RSNE=ct|CS=MD5|KF=PMSE|) E2(|KD=WPA2|RSNE=ct|CS=MD5|KF=xxxx|) E2(|KD=WPA2|RSNE=ct|CS=MD5|KF=xxSE|) E2(|KD=WPA2|RSNE=tt|CS=MD5|KF=PMSE|) E2(|KD=WPA2|RSNE=tt|CS=MD5|KF=xxxx|) E2(|KD=WPA2|RSNE=tt|CS=MD5|KF=xxSE|) E2(|MIC=F|CS=SHA1|KF=Pxxx|) E2(|MIC=F|CS=SHA1|KF=PMSE|) E4(|RC=>|) E4(|MIC=F|) E4(|NONC=W|) E4(|KD=WPA1|CS=MD5|) E4(|KD=WPA1|CS=MD5|KF=PMxx|) E4(|KD=WPA2|CS=MD5|) E4(|KD=WPA2|CS=SHA1|KF=PMSx|) E4(|KD=WPA2|CS=SHA1|KF=PMSE|) E4(|KD=WPA2|CS=SHA1|KF=Pxxx|) E4(|KD=WPA2|CS=SHA1|KF=xxxx|) E4(|KD=WPA2|CS=MD5|KF=PMSE|) E4(|KD=WPA2|CS=MD5|KF=xxxx|) E4(|KD=WPA2|CS=MD5|KF=xxSE|)
#alphabet = DELAY ASSOC(RSNE=tc) ASSOC(RSNE=tt) ASSOC(RSNE=ct) ASSOC(RSNE=cc) E2(|KD=WPA2|RSNE=cc|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|) DATA ENC_DATA
#alphabet = DELAY ASSOC(RSNE=cc) E2(|KD=WPA2|RSNE=cc|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|) DATA ENC_DATA
#alphabet = enable_s1 identity_request_plain auth_request_plain security_mode_command attach_accept tau_accept GUTI_reallocation dl_nas_transport rrc_release_tau paging_tmsi

alphabet = enable_s1 identity_request_plain auth_request_plain security_mode_command  attach_accept identity_request_mac identity_request_wrong_mac tau_accept GUTI_reallocation dl_nas_transport rrc_release_tau identity_request_replay auth_request_replay
#alphabet = enable_s1 identity_request auth_request security_mode_command esm_info_request emm_info attach_accept auth_reject attach_reject service_reject 
#lstar,dhc,kv,ttt,mp,rs
learning_algorithm=lstar

#wmethod,wpmethod,randomwords
eqtest=wpmethod

# Remaining number of states that the equivalence checker assume exists when 
# looking for an trace that contradicts the current hypothesis. 
# Only needed for w-method
max_depth=2

min_length=4
max_length=6
nr_queries=10
seed=1
#max_delays=5

# Time learning handling
#time_learn=true
#small_timeout=2.0
#big_timeout=6.0
#disable_outputs = Deauth REJECT AES_DATA TKIP_DATA Disas
#retrans_enabled = DELAY

# Lossy protocol handling
#use_cache=true

# For protocols that are particularly lossy, you can specify expected traces. This	
# Each flow contained within '[ ]'
# Each Query, formatted as {query:response}
# Whitespace is ignored
# expected_flows= [{ASSOC(RSNE=cc):E1(KD=WPA2|CS=SHA1)}]    [ {ASSOC(RSNE=cc):E1(KD=WPA2|CS=SHA1)}  { E2(|KD=WPA2|RSNE=cc|CS=SHA1|) : E3(KD=WPA2|CS=SHA1)  }  ]
###expected_flows=[{ASSOC(RSNE=cc):E1(KD=WPA2|CS=SHA1)}]    [ {ASSOC(RSNE=cc):E1(KD=WPA2|CS=SHA1)}  { E2(|KD=WPA2|RSNE=cc|CS=SHA1|) : E3(KD=WPA2|CS=SHA1)  }  ]

# Where to write logs
output_dir=./logs
